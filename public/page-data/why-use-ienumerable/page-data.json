{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-use-ienumerable/","result":{"data":{"site":{"siteMetadata":{"title":"benbrougher.tech","author":"Ben Brougher"}},"markdownRemark":{"id":"f4d123bd-8632-5f52-a52f-4e2114d4f3b2","excerpt":"If C# is new to you, and you’ve been wondering what the heck this  thing is about and why everyone uses it everywhere, you aren’t alone. Other languages like…","html":"<p>If C# is new to you, and you’ve been wondering what the heck this <code class=\"language-text\">IEnumerable</code> thing is about and why everyone uses it everywhere, you aren’t alone. Other languages like Java don’t have anything similar to it, and when using it you may run into issues like, “how do I add things to this list?”, or “how do I change types from one to another”. You may also ask yourself, “why not just add or remove items in a regular <code class=\"language-text\">List</code> and call it a day?” The answers lie in this post. By the end of it, you should will understand what <code class=\"language-text\">IEnumerable</code> is and how to not only understand the use case, but hopefully come out the other side of this blog post with the knowledge needed to build better applications. But first, what exactly is it?</p>\n<h1>The Definition</h1>\n<p>For those already familiar with Iterators and Interfaces like the ones in Java, you might want to skip this definition and get into the real meat and potatoes below.</p>\n<p><code class=\"language-text\">IEnumerable</code> is fundamentally an interface within the C# type system. It provides a contract between a calling bit of code, and the called bit of code. It serves to allow many very different things behave in the same way. The description of the <code class=\"language-text\">IEnumerable&lt;T&gt;</code> interface in particular (per Microsoft) is as follows:</p>\n<blockquote>\n<p>Exposes the enumerator, which supports a simple iteration over a\ncollection of a specified type.</p>\n</blockquote>\n<p>If you’ve had exposure to design patterns at all, what they are calling an “enumerator” is essentially the Iterator within the Iterator Pattern. This basically means an object that knows how to “walk” over a list of items. For example, you can obtain and enumerator, that knows how to walk through an array, or a list, or a database, and you can iterate through each of them in exactly the same way. The generic nature of enumerators, allows other features, such as for-each loops, and LINQ, to leverage them in powerful ways, which we will visit below.</p>\n<h1>Case for IEnumerable #1: Immutability</h1>\n<p>There is a large trend in the programming community towards a concept of immutability, that basically means the thing that you are working with is guaranteed not to change. <code class=\"language-text\">IEnumerable</code> does not guarantee that the object with in it is immutable, but it does guarantee that nothing can change the set of objects represented by the <code class=\"language-text\">IEnumerable</code> without creating a new variable of that type. Looking at the docs <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=netframework-4.8\">here</a>, there are no methods for adding items, only for getting them. This seems like a major limitation, but in practice, it reduces errors and promotes writing clean, concise, intent-revealing code. It becomes obvious if the variable you are working with is a filtered version of the original list of items or not when the variable name reflects it.</p>\n<h1>Case for IEnumerable #2: LINQ Methods</h1>\n<p>The other advantage to using IEnumerable consistently, is the use of LINQ functions and statements. Instead of iterating over a collection, they provide a generic way for you to manipulate lists. To be clear, lists and arrays are already enumerable (they implement the IEnumerable interface), so you may use LINQ with those as well, but using IEnumerable for most things creates a shift in mindset, from mutable lists to immutable collections. A few of these that I use most frequently are below:</p>\n<h2>The Where Method</h2>\n<p>You might have code that looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> IEnumerable_Blog_Post\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> List<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> CARS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Make <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span>\n                Model <span class=\"token operator\">=</span> <span class=\"token string\">\"Edge\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Make <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">,</span>\n                Model <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Make <span class=\"token operator\">=</span> <span class=\"token string\">\"Toyota\"</span><span class=\"token punctuation\">,</span>\n                Model <span class=\"token operator\">=</span> <span class=\"token string\">\"Supra\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            List<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> fordCars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car <span class=\"token keyword\">in</span> CARS<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>Make <span class=\"token operator\">==</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span>\n                    fordCars<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Make <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Model <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here I provide the car class and the list of cars for context, but I would like to bring your attention to the <code class=\"language-text\">Main()</code> method. We perform a simple operation, loop through the old array, and only put the cars that are of the make “Ford” in the new array. This is rather verbose and long winded. And it mutates the <code class=\"language-text\">fordCars</code> list as it is adding them. This is not ideal, as it increases the chances of bugs.</p>\n<p>Using the <code class=\"language-text\">Where</code> method, the <code class=\"language-text\">Main</code> function looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Linq<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            IEnumerable<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span> fordCars <span class=\"token operator\">=</span> CARS<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>car <span class=\"token operator\">=></span> car<span class=\"token punctuation\">.</span>Make <span class=\"token operator\">==</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>This makes the code more concise, and if you are accustomed to the syntax, makes it more simple to reason about.</p>\n<h2>The Select Method</h2>\n<p>The next most useful LINQ method, in my experience, is the <code class=\"language-text\">Select</code> method. Imagine (using the same class and list) the following operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> carNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car <span class=\"token keyword\">in</span> CARS<span class=\"token punctuation\">)</span>\n                carNames<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"{car.Make} {car.Model}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>(Ignoring that this could be solved with an overridden <code class=\"language-text\">ToString</code> method. This has the same problem as the above. It mutates a list to create a list separate from the original. In all actuality, with LINQ it could be written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> carNames <span class=\"token operator\">=</span> CARS<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>car <span class=\"token operator\">=></span> $<span class=\"token string\">\"{car.Make} {car.Model}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>This creates a fresh new <code class=\"language-text\">IEnumerable</code> object that contains the full names of the cars.</p>\n<h2>The Contcat Method</h2>\n<p>Another is the <code class=\"language-text\">Concat</code> method. Sometimes we might need to combine collections together into a single enumerable list. The following shows how you would combine the two:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> IEnumerable_Blog_Post\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> PRIMARY_COLORS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Green\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> SECONDARY_COLORS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Yellow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Cyan\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Magenta\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            List<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> color <span class=\"token keyword\">in</span> PRIMARY_COLORS<span class=\"token punctuation\">)</span>\n                colors<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> color <span class=\"token keyword\">in</span> SECONDARY_COLORS<span class=\"token punctuation\">)</span>\n                colors<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A better way of performing this would be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">></span> colors <span class=\"token operator\">=</span> PRIMARY_COLORS<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>SECONDARY_COLORS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>This combines the two arrays into a single enumerable that can be iterated upon.</p>\n<h2>Others</h2>\n<p>There are many other examples of LINQ methods, a few are listed here:</p>\n<ul>\n<li><code class=\"language-text\">Distinct</code> - Gets only the unique items in the list</li>\n<li><code class=\"language-text\">SelectMany</code> - Flattens the list of lists into a single list</li>\n<li><code class=\"language-text\">ToDictionary</code> - Creates a dictionary from a list of items when shown how to access the key and value</li>\n<li>Many others listed <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable?view=netframework-4.8\">here</a>.</li>\n</ul>\n<h1>Case for IEnumerable and LINQ #3: Performance</h1>\n<p>When using <code class=\"language-text\">IEnumerable</code>s there is also the added advantage of being lazily evaluated. Chaining linq statements are only evaluated upon iteration. This means that no operation is performed until the collection is iterated over. Then it will perform the specified transforms.</p>\n<h2>Aren’t These like Streams in Java?</h2>\n<p>If you have experience with Java, you may be asking, aren’t these very much like Java’s Streams? The answer is they address the same problem, but they don’t have the performance limitations or the restrictions that Streams do. <code class=\"language-text\">IEnumerable</code>s are usually just as performant, or even more-so, than their simple foreach counterparts. In addition, you may iterate over the collection, not just once like Streams, but as many times as you wish. This removes most of the limitations of Streams while retaining the benefits (and using less code overall).</p>\n<h1>Case for IEnumerable #4: Programming to and Interface, Not an Implementation</h1>\n<p>The last and final advantage to using <code class=\"language-text\">IEnumerable</code> over <code class=\"language-text\">List</code> is that by using the <code class=\"language-text\">IEnumerable</code> type, you are programming to an interface and not an implementation. This decreases the coupling on the collection underneath and provides a better way to manage collections of data. This is widely accepted as a good practice in object oriented coding, that leads to cleaner, easier to test code. This is especially true for incoming parameters and return types. These are places that should use an interface (not just IEnumerable but interfaces in general), because if the underlying implementation changes, modifications won’t have to be made to the consumers of that function or class.</p>\n<h1>Conclusion</h1>\n<p>This concept of <code class=\"language-text\">IEnumerable</code> is an extremely powerful one. It allows you to reduce boilerplate code while retaining performance. It is not without its downsides. Debugging requires more breakpoints and setting a breakpoint within a lambda is hard without breaking it into a code block. This however is weighed against the advantage of declaring transforms on data, rather than performing the underlying operations, decreasing the need for the debugger in the first place.</p>\n<p>If you find any issues with this blog or blog post, please submit a pull request or just an issue on my <a href=\"https://github.com/moutansos/benbrougher-tech\">repo here</a>.</p>","frontmatter":{"title":"Why Use IEnumerable?","date":"September 22, 2019","description":"What is IEnumerable in C#? And why should I use it?","featuredImage":null}}},"pageContext":{"slug":"/why-use-ienumerable/","previous":{"fields":{"slug":"/python-flask/"},"frontmatter":{"title":"Getting Started With API Development in Flask"}},"next":{"fields":{"slug":"/vue-event-bus-tutorial/"},"frontmatter":{"title":"How to Use a Vue.js Event Bus"}}}}}