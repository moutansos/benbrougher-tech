{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-flask/","result":{"data":{"site":{"siteMetadata":{"title":"benbrougher.tech","author":"Ben Brougher"}},"markdownRemark":{"id":"c8c00c79-87c1-5b66-abe4-3dd758d5238d","excerpt":"I am primarily a back-end .NET Core developer, so when I heard that I would perhaps soon be using python for a project at work, I knew I had to refresh my…","html":"<p>I am primarily a back-end .NET Core developer, so when I heard that I would perhaps soon be using python for a project at work, I knew I had to refresh my Python skills. My start in programming stemmed from playing with Python 2 in middle-school, but that has long since been forgotten when I entered the .NET and NodeJS worlds. My experience then with Python had been passing and transient at best, barely scratching the surface of the language and it’s capabilities at the time. This guide is a guide with steps I followed as part of my reintroduction to Python. This is a basic guide for anyone looking to get started developing APIs with Python 3 and Flask. This tutorial assumes that you have Python 3 and PIP installed in your path. I also use PowerShell as my terminal, so the commands may be different depending on your system.</p>\n<p>At the end of this blog post (if you are following along), you will have created a basic Hello World API in Flask.</p>\n<h1>What is Flask?</h1>\n<p><a href=\"https://palletsprojects.com/p/flask/\">Flask</a> is defined as:</p>\n<blockquote>\n<p>A lightweight WSGI web application framework.\nIt is designed to make getting started quick and easy,\nwith the ability to scale up to complex applications.</p>\n</blockquote>\n<p>It can be used to create different types of web applications. Different options include legacy multi-page applications, RESTful or GraphQL APIs, or used to serve static resources. In this tutorial, we will focus on building a RESTful API.</p>\n<h1>Setting Up a Basic Hello World API</h1>\n<p>The first goal is to do a simple GET request on our server and return the essential “Hello World!” string. This will be the start of our API.</p>\n<h2>Project Setup</h2>\n<p>First, from the terminal, run the following commands to install flask and flask_restful via pip:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">pip install flask\npip install flask_restful</code></pre></div>\n<p>Then create a new directory and a file to start our project:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">mkdir hello<span class=\"token operator\">-</span>world<span class=\"token operator\">-</span>api\ncd hello<span class=\"token operator\">-</span>world<span class=\"token operator\">-</span>api\n<span class=\"token function\">New-Item</span> main<span class=\"token punctuation\">.</span>py <span class=\"token comment\"># use touch main.py on bash</span></code></pre></div>\n<p>From here open the main.py file in your editor of choice. I would highly recommend VS Code with the Python extension.</p>\n<h2>Creating a Hello World API</h2>\n<p>The piece of code required is the imports to load the flask library and make it available in our application. In the start of your file add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> MethodView\n<span class=\"token keyword\">from</span> flask_restful <span class=\"token keyword\">import</span> Api</code></pre></div>\n<p>The next step is to create an instance of Flask and then an instance of our API that uses the new Flask instance. Place the following code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napi <span class=\"token operator\">=</span> Api<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">__name__</code> variable in python refers to the name of the library or module that is currently being imported. If the script is the main file in the program, it will be equal to <code class=\"language-text\">__main__</code>.</p>\n<p>After this, we can create our controller. Initially, it will only have a single method, <code class=\"language-text\">get()</code> that will respond to get requests on our endpoint. The controller class will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span>MethodView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World!\"</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span></code></pre></div>\n<p>This class defines actions that are taken when our API is called. Any logic that handles things like incoming parameters are specified here. Not only is our data object returned here, but also our HTTP status code. <code class=\"language-text\">200</code> indicates that the request was successful and everything executed as indented. For a full list of HTTP status codes and their meanings, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\">here</a>.</p>\n<p>Next, we define our resource in our <code class=\"language-text\">api</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">api<span class=\"token punctuation\">.</span>add_resource<span class=\"token punctuation\">(</span>HelloWorld<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/hello/world\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We pass in our controller here. Also, the <code class=\"language-text\">&lt;string:id&gt;</code> part of the URL specified here defines a template. This template indicates that the ID of the item should be passed from the URL to a parameter in the controller (the <code class=\"language-text\">id</code>) parameter in the <code class=\"language-text\">get</code> method signature).</p>\n<p>After this we can invoke our application via this bit of boiler-plate python code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> threaded<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This code determines if the script is a library or if it is a running entry point script. If it is an entry point script, then the API is started and flask is run. In order to start this, in a terminal, run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\">python3 <span class=\"token punctuation\">.</span>\\main<span class=\"token punctuation\">.</span>py</code></pre></div>\n<blockquote>\n<p>Note: Depending on your setup you may be able to use <code class=\"language-text\">python</code> instead of <code class=\"language-text\">python3</code>.\nThis depends on how the Python distribution is set up on your system.</p>\n</blockquote>\n<p>This will start the flask application and you should see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> * Serving Flask app &quot;main&quot; (lazy loading)\n * Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n * Restarting with stat\n * Debugger PIN: 197-957-841\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</code></pre></div>\n<p>You can now make a request to your API. Utilizing something like Postman, curl, or Invoke-WebRequest you can get the data from the API. For example:</p>\n<p>On Linux:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://127.0.0.1:5000/hello/world</code></pre></div>\n<p>Or on PowerShell:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Invoke-WebRequest</span> http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>127<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1:5000<span class=\"token operator\">/</span>hello<span class=\"token operator\">/</span>world</code></pre></div>\n<p>You should see a response that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Conclusion</h1>\n<p>You now have a simple working REST API! Stay tuned for how to use use REST-full Flask to it’s full potential set up basic Create, Read, Update and Delete, operations, and also how to connect it to a database for storing the data in the API long term. If you find any issues with this blog, please submit a pull request on my <a href=\"https://github.com/moutansos/benbrougher-tech\">repo here</a>.</p>","frontmatter":{"title":"Getting Started With API Development in Flask","date":"September 13, 2019","description":"A Guide to Starting an API With Flask and Python","featuredImage":null}}},"pageContext":{"slug":"/python-flask/","previous":null,"next":{"fields":{"slug":"/why-use-ienumerable/"},"frontmatter":{"title":"Why Use IEnumerable?"}}}}}